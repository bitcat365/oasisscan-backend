// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	account "oasisscan-backend/api/internal/handler/account"
	chain "oasisscan-backend/api/internal/handler/chain"
	common "oasisscan-backend/api/internal/handler/common"
	governance "oasisscan-backend/api/internal/handler/governance"
	market "oasisscan-backend/api/internal/handler/market"
	runtime "oasisscan-backend/api/internal/handler/runtime"
	validator "oasisscan-backend/api/internal/handler/validator"
	"oasisscan-backend/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/account/debonding",
				Handler: account.AccountDebondingHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/account/delegations",
				Handler: account.AccountDelegationsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/account/info/:address",
				Handler: account.AccountInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/account/reward/export",
				Handler: account.AccountRewardExportHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/account/reward/list",
				Handler: account.AccountRewardHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/account/reward/stats",
				Handler: account.AccountRewardStatsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/account/staking/events",
				Handler: account.AccountStakingEventsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/account/staking/events/info",
				Handler: account.AccountStakingEventsInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/chain/block/:height",
				Handler: chain.ChainBlockInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/chain/blocks",
				Handler: chain.ChainBlocksHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/chain/proposedblocks",
				Handler: chain.ChainProposedBlocksHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/chain/search",
				Handler: chain.ChainSearchHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/chain/transaction/:hash",
				Handler: chain.ChainTransactionInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/chain/transactions",
				Handler: chain.ChainTransactionsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/health",
				Handler: common.HealthHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/trend",
				Handler: common.NetworkTrendHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/governance/proposallist",
				Handler: governance.GovernanceProposalListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/governance/proposalwithvotes",
				Handler: governance.GovernanceProposalWithVotesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/governance/votes",
				Handler: governance.GovernanceVotesHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/market/chart",
				Handler: market.MarketChartHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/market/info",
				Handler: market.MarketInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/runtime/list",
				Handler: runtime.RuntimeListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/runtime/round/info",
				Handler: runtime.RuntimeRoundInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/runtime/round/list",
				Handler: runtime.RuntimeRoundListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/runtime/stats",
				Handler: runtime.RuntimeStatsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/runtime/transaction/info",
				Handler: runtime.RuntimeTransactionInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/runtime/transaction/list",
				Handler: runtime.RuntimeTransactionListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/validator/blocksstats",
				Handler: validator.ValidatorBlocksStatsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/validator/delegators",
				Handler: validator.DelegatorsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/validator/escrowstats",
				Handler: validator.ValidatorEscrowStatsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/validator/info",
				Handler: validator.ValidatorInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/validator/list",
				Handler: validator.ValidatorListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/validator/signstats",
				Handler: validator.ValidatorSignStatsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v2"),
	)
}

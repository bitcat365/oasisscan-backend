// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	blockFieldNames          = builder.RawFieldNames(&Block{}, true)
	blockRows                = strings.Join(blockFieldNames, ",")
	blockRowsExpectAutoSet   = strings.Join(stringx.Remove(blockFieldNames, "id"), ",")
	blockRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(blockFieldNames, "id"))
)

type (
	blockModel interface {
		Insert(ctx context.Context, data *Block) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Block, error)
		FindOneByHeight(ctx context.Context, height int64) (*Block, error)
		Update(ctx context.Context, data *Block) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBlockModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Block struct {
		Id              int64     `db:"id"`
		Height          int64     `db:"height"`
		Epoch           int64     `db:"epoch"`
		Hash            string    `db:"hash"`
		Timestamp       time.Time `db:"timestamp"`
		Txs             int64     `db:"txs"`
		ProposerAddress string    `db:"proposer_address"`
		Meta            string    `db:"meta"`
		CreatedAt       time.Time `db:"created_at"`
		UpdatedAt       time.Time `db:"updated_at"`
	}
)

func newBlockModel(conn sqlx.SqlConn) *defaultBlockModel {
	return &defaultBlockModel{
		conn:  conn,
		table: `"public"."block"`,
	}
}

func (m *defaultBlockModel) withSession(session sqlx.Session) *defaultBlockModel {
	return &defaultBlockModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."block"`,
	}
}

func (m *defaultBlockModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBlockModel) FindOne(ctx context.Context, id int64) (*Block, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", blockRows, m.table)
	var resp Block
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlockModel) FindOneByHeight(ctx context.Context, height int64) (*Block, error) {
	var resp Block
	query := fmt.Sprintf("select %s from %s where height = $1 limit 1", blockRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, height)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlockModel) Insert(ctx context.Context, data *Block) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, blockRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Height, data.Epoch, data.Hash, data.Timestamp, data.Txs, data.ProposerAddress, data.Meta, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultBlockModel) Update(ctx context.Context, newData *Block) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, blockRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Height, newData.Epoch, newData.Hash, newData.Timestamp, newData.Txs, newData.ProposerAddress, newData.Meta, newData.CreatedAt, newData.UpdatedAt)
	return err
}

func (m *defaultBlockModel) tableName() string {
	return m.table
}

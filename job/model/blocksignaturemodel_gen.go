// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	blockSignatureFieldNames          = builder.RawFieldNames(&BlockSignature{}, true)
	blockSignatureRows                = strings.Join(blockSignatureFieldNames, ",")
	blockSignatureRowsExpectAutoSet   = strings.Join(stringx.Remove(blockSignatureFieldNames, "id"), ",")
	blockSignatureRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(blockSignatureFieldNames, "id"))
)

type (
	blockSignatureModel interface {
		Insert(ctx context.Context, data *BlockSignature) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BlockSignature, error)
		FindOneByHeightValidatorAddress(ctx context.Context, height int64, validatorAddress string) (*BlockSignature, error)
		Update(ctx context.Context, data *BlockSignature) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBlockSignatureModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BlockSignature struct {
		Id               int64     `db:"id"`
		Height           int64     `db:"height"`
		BlockIdFlag      int64     `db:"block_id_flag"`
		ValidatorAddress string    `db:"validator_address"`
		Timestamp        time.Time `db:"timestamp"`
		Signature        string    `db:"signature"`
		CreatedAt        time.Time `db:"created_at"`
		UpdatedAt        time.Time `db:"updated_at"`
	}
)

func newBlockSignatureModel(conn sqlx.SqlConn) *defaultBlockSignatureModel {
	return &defaultBlockSignatureModel{
		conn:  conn,
		table: `"public"."block_signature"`,
	}
}

func (m *defaultBlockSignatureModel) withSession(session sqlx.Session) *defaultBlockSignatureModel {
	return &defaultBlockSignatureModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."block_signature"`,
	}
}

func (m *defaultBlockSignatureModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBlockSignatureModel) FindOne(ctx context.Context, id int64) (*BlockSignature, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", blockSignatureRows, m.table)
	var resp BlockSignature
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlockSignatureModel) FindOneByHeightValidatorAddress(ctx context.Context, height int64, validatorAddress string) (*BlockSignature, error) {
	var resp BlockSignature
	query := fmt.Sprintf("select %s from %s where height = $1 and validator_address = $2 limit 1", blockSignatureRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, height, validatorAddress)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlockSignatureModel) Insert(ctx context.Context, data *BlockSignature) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, blockSignatureRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Height, data.BlockIdFlag, data.ValidatorAddress, data.Timestamp, data.Signature, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultBlockSignatureModel) Update(ctx context.Context, newData *BlockSignature) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, blockSignatureRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Height, newData.BlockIdFlag, newData.ValidatorAddress, newData.Timestamp, newData.Signature, newData.CreatedAt, newData.UpdatedAt)
	return err
}

func (m *defaultBlockSignatureModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	delegatorFieldNames          = builder.RawFieldNames(&Delegator{}, true)
	delegatorRows                = strings.Join(delegatorFieldNames, ",")
	delegatorRowsExpectAutoSet   = strings.Join(stringx.Remove(delegatorFieldNames, "id"), ",")
	delegatorRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(delegatorFieldNames, "id"))
)

type (
	delegatorModel interface {
		Insert(ctx context.Context, data *Delegator) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Delegator, error)
		FindOneByValidatorDelegator(ctx context.Context, validator string, delegator string) (*Delegator, error)
		Update(ctx context.Context, data *Delegator) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDelegatorModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Delegator struct {
		Id        int64     `db:"id"`
		Validator string    `db:"validator"`
		Delegator string    `db:"delegator"`
		Shares    int64     `db:"shares"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newDelegatorModel(conn sqlx.SqlConn) *defaultDelegatorModel {
	return &defaultDelegatorModel{
		conn:  conn,
		table: `"public"."delegator"`,
	}
}

func (m *defaultDelegatorModel) withSession(session sqlx.Session) *defaultDelegatorModel {
	return &defaultDelegatorModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."delegator"`,
	}
}

func (m *defaultDelegatorModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDelegatorModel) FindOne(ctx context.Context, id int64) (*Delegator, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", delegatorRows, m.table)
	var resp Delegator
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDelegatorModel) FindOneByValidatorDelegator(ctx context.Context, validator string, delegator string) (*Delegator, error) {
	var resp Delegator
	query := fmt.Sprintf("select %s from %s where validator = $1 and delegator = $2 limit 1", delegatorRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, validator, delegator)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDelegatorModel) Insert(ctx context.Context, data *Delegator) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, delegatorRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Validator, data.Delegator, data.Shares, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultDelegatorModel) Update(ctx context.Context, newData *Delegator) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, delegatorRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Validator, newData.Delegator, newData.Shares, newData.CreatedAt, newData.UpdatedAt)
	return err
}

func (m *defaultDelegatorModel) tableName() string {
	return m.table
}

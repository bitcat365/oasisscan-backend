// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	escrowStatsFieldNames          = builder.RawFieldNames(&EscrowStats{}, true)
	escrowStatsRows                = strings.Join(escrowStatsFieldNames, ",")
	escrowStatsRowsExpectAutoSet   = strings.Join(stringx.Remove(escrowStatsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	escrowStatsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(escrowStatsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	escrowStatsModel interface {
		Insert(ctx context.Context, data *EscrowStats) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*EscrowStats, error)
		FindOneByEntityAddressHeight(ctx context.Context, entityAddress string, height int64) (*EscrowStats, error)
		Update(ctx context.Context, data *EscrowStats) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEscrowStatsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EscrowStats struct {
		Id            int64     `db:"id"`
		Height        int64     `db:"height"`
		EntityAddress string    `db:"entity_address"`
		Escrow        int64     `db:"escrow"`
		Date          time.Time `db:"date"`
		CreatedAt     time.Time `db:"created_at"`
		UpdatedAt     time.Time `db:"updated_at"`
	}
)

func newEscrowStatsModel(conn sqlx.SqlConn) *defaultEscrowStatsModel {
	return &defaultEscrowStatsModel{
		conn:  conn,
		table: `"public"."escrow_stats"`,
	}
}

func (m *defaultEscrowStatsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEscrowStatsModel) FindOne(ctx context.Context, id int64) (*EscrowStats, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", escrowStatsRows, m.table)
	var resp EscrowStats
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEscrowStatsModel) FindOneByEntityAddressHeight(ctx context.Context, entityAddress string, height int64) (*EscrowStats, error) {
	var resp EscrowStats
	query := fmt.Sprintf("select %s from %s where entity_address = $1 and height = $2 limit 1", escrowStatsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, entityAddress, height)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEscrowStatsModel) Insert(ctx context.Context, data *EscrowStats) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, escrowStatsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Height, data.EntityAddress, data.Escrow, data.Date)
	return ret, err
}

func (m *defaultEscrowStatsModel) Update(ctx context.Context, newData *EscrowStats) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, escrowStatsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Height, newData.EntityAddress, newData.Escrow, newData.Date)
	return err
}

func (m *defaultEscrowStatsModel) tableName() string {
	return m.table
}

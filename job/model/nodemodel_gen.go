// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	nodeFieldNames          = builder.RawFieldNames(&Node{}, true)
	nodeRows                = strings.Join(nodeFieldNames, ",")
	nodeRowsExpectAutoSet   = strings.Join(stringx.Remove(nodeFieldNames, "id"), ",")
	nodeRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(nodeFieldNames, "id"))
)

type (
	nodeModel interface {
		Insert(ctx context.Context, data *Node) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Node, error)
		FindOneByEntityIdNodeIdConsensusAddress(ctx context.Context, entityId string, nodeId string, consensusAddress string) (*Node, error)
		Update(ctx context.Context, data *Node) error
		Delete(ctx context.Context, id int64) error
	}

	defaultNodeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Node struct {
		Id               int64     `db:"id"`
		EntityId         string    `db:"entity_id"`
		NodeId           string    `db:"node_id"`
		ConsensusAddress string    `db:"consensus_address"`
		Height           int64     `db:"height"`
		CreatedAt        time.Time `db:"created_at"`
		UpdatedAt        time.Time `db:"updated_at"`
	}
)

func newNodeModel(conn sqlx.SqlConn) *defaultNodeModel {
	return &defaultNodeModel{
		conn:  conn,
		table: `"public"."node"`,
	}
}

func (m *defaultNodeModel) withSession(session sqlx.Session) *defaultNodeModel {
	return &defaultNodeModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."node"`,
	}
}

func (m *defaultNodeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultNodeModel) FindOne(ctx context.Context, id int64) (*Node, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", nodeRows, m.table)
	var resp Node
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNodeModel) FindOneByEntityIdNodeIdConsensusAddress(ctx context.Context, entityId string, nodeId string, consensusAddress string) (*Node, error) {
	var resp Node
	query := fmt.Sprintf("select %s from %s where entity_id = $1 and node_id = $2 and consensus_address = $3 limit 1", nodeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, entityId, nodeId, consensusAddress)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNodeModel) Insert(ctx context.Context, data *Node) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, nodeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.EntityId, data.NodeId, data.ConsensusAddress, data.Height, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultNodeModel) Update(ctx context.Context, newData *Node) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, nodeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.EntityId, newData.NodeId, newData.ConsensusAddress, newData.Height, newData.CreatedAt, newData.UpdatedAt)
	return err
}

func (m *defaultNodeModel) tableName() string {
	return m.table
}

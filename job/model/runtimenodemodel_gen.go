// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	runtimeNodeFieldNames          = builder.RawFieldNames(&RuntimeNode{}, true)
	runtimeNodeRows                = strings.Join(runtimeNodeFieldNames, ",")
	runtimeNodeRowsExpectAutoSet   = strings.Join(stringx.Remove(runtimeNodeFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	runtimeNodeRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(runtimeNodeFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	runtimeNodeModel interface {
		Insert(ctx context.Context, data *RuntimeNode) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RuntimeNode, error)
		FindOneByRuntimeIdNodeIdEntityId(ctx context.Context, runtimeId string, nodeId string, entityId string) (*RuntimeNode, error)
		Update(ctx context.Context, data *RuntimeNode) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRuntimeNodeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RuntimeNode struct {
		Id        int64     `db:"id"`
		RuntimeId string    `db:"runtime_id"`
		NodeId    string    `db:"node_id"`
		EntityId  string    `db:"entity_id"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newRuntimeNodeModel(conn sqlx.SqlConn) *defaultRuntimeNodeModel {
	return &defaultRuntimeNodeModel{
		conn:  conn,
		table: `"public"."runtime_node"`,
	}
}

func (m *defaultRuntimeNodeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRuntimeNodeModel) FindOne(ctx context.Context, id int64) (*RuntimeNode, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", runtimeNodeRows, m.table)
	var resp RuntimeNode
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuntimeNodeModel) FindOneByRuntimeIdNodeIdEntityId(ctx context.Context, runtimeId string, nodeId string, entityId string) (*RuntimeNode, error) {
	var resp RuntimeNode
	query := fmt.Sprintf("select %s from %s where runtime_id = $1 and node_id = $2 and entity_id = $3 limit 1", runtimeNodeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, runtimeId, nodeId, entityId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuntimeNodeModel) Insert(ctx context.Context, data *RuntimeNode) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, runtimeNodeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RuntimeId, data.NodeId, data.EntityId)
	return ret, err
}

func (m *defaultRuntimeNodeModel) Update(ctx context.Context, newData *RuntimeNode) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, runtimeNodeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.RuntimeId, newData.NodeId, newData.EntityId)
	return err
}

func (m *defaultRuntimeNodeModel) tableName() string {
	return m.table
}

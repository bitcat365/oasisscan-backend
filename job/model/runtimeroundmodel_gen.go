// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	runtimeRoundFieldNames          = builder.RawFieldNames(&RuntimeRound{}, true)
	runtimeRoundRows                = strings.Join(runtimeRoundFieldNames, ",")
	runtimeRoundRowsExpectAutoSet   = strings.Join(stringx.Remove(runtimeRoundFieldNames, "id"), ",")
	runtimeRoundRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(runtimeRoundFieldNames, "id"))
)

type (
	runtimeRoundModel interface {
		Insert(ctx context.Context, data *RuntimeRound) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RuntimeRound, error)
		FindOneByRuntimeIdRound(ctx context.Context, runtimeId string, round int64) (*RuntimeRound, error)
		Update(ctx context.Context, data *RuntimeRound) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRuntimeRoundModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RuntimeRound struct {
		Id           int64     `db:"id"`
		RuntimeId    string    `db:"runtime_id"`
		Round        int64     `db:"round"`
		Version      int64     `db:"version"`
		Timestamp    time.Time `db:"timestamp"`
		HeaderType   int64     `db:"header_type"`
		PreviousHash string    `db:"previous_hash"`
		IoRoot       string    `db:"io_root"`
		StateRoot    string    `db:"state_root"`
		MessagesHash string    `db:"messages_hash"`
		InMsgsHash   string    `db:"in_msgs_hash"`
		CreatedAt    time.Time `db:"created_at"`
		UpdatedAt    time.Time `db:"updated_at"`
	}
)

func newRuntimeRoundModel(conn sqlx.SqlConn) *defaultRuntimeRoundModel {
	return &defaultRuntimeRoundModel{
		conn:  conn,
		table: `"public"."runtime_round"`,
	}
}

func (m *defaultRuntimeRoundModel) withSession(session sqlx.Session) *defaultRuntimeRoundModel {
	return &defaultRuntimeRoundModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."runtime_round"`,
	}
}

func (m *defaultRuntimeRoundModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRuntimeRoundModel) FindOne(ctx context.Context, id int64) (*RuntimeRound, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", runtimeRoundRows, m.table)
	var resp RuntimeRound
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuntimeRoundModel) FindOneByRuntimeIdRound(ctx context.Context, runtimeId string, round int64) (*RuntimeRound, error) {
	var resp RuntimeRound
	query := fmt.Sprintf("select %s from %s where runtime_id = $1 and round = $2 limit 1", runtimeRoundRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, runtimeId, round)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuntimeRoundModel) Insert(ctx context.Context, data *RuntimeRound) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)", m.table, runtimeRoundRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RuntimeId, data.Round, data.Version, data.Timestamp, data.HeaderType, data.PreviousHash, data.IoRoot, data.StateRoot, data.MessagesHash, data.InMsgsHash, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultRuntimeRoundModel) Update(ctx context.Context, newData *RuntimeRound) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, runtimeRoundRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.RuntimeId, newData.Round, newData.Version, newData.Timestamp, newData.HeaderType, newData.PreviousHash, newData.IoRoot, newData.StateRoot, newData.MessagesHash, newData.InMsgsHash, newData.CreatedAt, newData.UpdatedAt)
	return err
}

func (m *defaultRuntimeRoundModel) tableName() string {
	return m.table
}

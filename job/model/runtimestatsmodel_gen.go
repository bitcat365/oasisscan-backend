// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	runtimeStatsFieldNames          = builder.RawFieldNames(&RuntimeStats{}, true)
	runtimeStatsRows                = strings.Join(runtimeStatsFieldNames, ",")
	runtimeStatsRowsExpectAutoSet   = strings.Join(stringx.Remove(runtimeStatsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	runtimeStatsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(runtimeStatsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	runtimeStatsModel interface {
		Insert(ctx context.Context, data *RuntimeStats) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RuntimeStats, error)
		FindOneByRuntimeIdEntityId(ctx context.Context, runtimeId string, entityId string) (*RuntimeStats, error)
		Update(ctx context.Context, data *RuntimeStats) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRuntimeStatsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RuntimeStats struct {
		Id             int64     `db:"id"`
		RuntimeId      string    `db:"runtime_id"`
		EntityId       string    `db:"entity_id"`
		RoundsElected  int64     `db:"rounds_elected"`
		RoundsPrimary  int64     `db:"rounds_primary"`
		RoundsBackup   int64     `db:"rounds_backup"`
		RoundsProposer int64     `db:"rounds_proposer"`
		CreatedAt      time.Time `db:"created_at"`
		UpdatedAt      time.Time `db:"updated_at"`
	}
)

func newRuntimeStatsModel(conn sqlx.SqlConn) *defaultRuntimeStatsModel {
	return &defaultRuntimeStatsModel{
		conn:  conn,
		table: `"public"."runtime_stats"`,
	}
}

func (m *defaultRuntimeStatsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRuntimeStatsModel) FindOne(ctx context.Context, id int64) (*RuntimeStats, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", runtimeStatsRows, m.table)
	var resp RuntimeStats
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuntimeStatsModel) FindOneByRuntimeIdEntityId(ctx context.Context, runtimeId string, entityId string) (*RuntimeStats, error) {
	var resp RuntimeStats
	query := fmt.Sprintf("select %s from %s where runtime_id = $1 and entity_id = $2 limit 1", runtimeStatsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, runtimeId, entityId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuntimeStatsModel) Insert(ctx context.Context, data *RuntimeStats) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, runtimeStatsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RuntimeId, data.EntityId, data.RoundsElected, data.RoundsPrimary, data.RoundsBackup, data.RoundsProposer)
	return ret, err
}

func (m *defaultRuntimeStatsModel) Update(ctx context.Context, newData *RuntimeStats) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, runtimeStatsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.RuntimeId, newData.EntityId, newData.RoundsElected, newData.RoundsPrimary, newData.RoundsBackup, newData.RoundsProposer)
	return err
}

func (m *defaultRuntimeStatsModel) tableName() string {
	return m.table
}

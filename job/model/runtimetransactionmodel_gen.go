// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	runtimeTransactionFieldNames          = builder.RawFieldNames(&RuntimeTransaction{}, true)
	runtimeTransactionRows                = strings.Join(runtimeTransactionFieldNames, ",")
	runtimeTransactionRowsExpectAutoSet   = strings.Join(stringx.Remove(runtimeTransactionFieldNames, "id"), ",")
	runtimeTransactionRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(runtimeTransactionFieldNames, "id"))
)

type (
	runtimeTransactionModel interface {
		Insert(ctx context.Context, data *RuntimeTransaction) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RuntimeTransaction, error)
		FindOneByRuntimeIdRoundTxHash(ctx context.Context, runtimeId string, round int64, txHash string) (*RuntimeTransaction, error)
		Update(ctx context.Context, data *RuntimeTransaction) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRuntimeTransactionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RuntimeTransaction struct {
		Id            int64     `db:"id"`
		RuntimeId     string    `db:"runtime_id"`
		Round         int64     `db:"round"`
		TxHash        string    `db:"tx_hash"`
		Position      int64     `db:"position"`
		EvmHash       string    `db:"evm_hash"`
		ConsensusFrom string    `db:"consensus_from"`
		ConsensusTo   string    `db:"consensus_to"`
		EvmFrom       string    `db:"evm_from"`
		EvmTo         string    `db:"evm_to"`
		Method        string    `db:"method"`
		Result        bool      `db:"result"`
		Messages      string    `db:"messages"`
		Timestamp     time.Time `db:"timestamp"`
		Type          string    `db:"type"`
		Raw           string    `db:"raw"`
		Events        string    `db:"events"`
		CreatedAt     time.Time `db:"created_at"`
		UpdatedAt     time.Time `db:"updated_at"`
	}
)

func newRuntimeTransactionModel(conn sqlx.SqlConn) *defaultRuntimeTransactionModel {
	return &defaultRuntimeTransactionModel{
		conn:  conn,
		table: `"public"."runtime_transaction"`,
	}
}

func (m *defaultRuntimeTransactionModel) withSession(session sqlx.Session) *defaultRuntimeTransactionModel {
	return &defaultRuntimeTransactionModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."runtime_transaction"`,
	}
}

func (m *defaultRuntimeTransactionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRuntimeTransactionModel) FindOne(ctx context.Context, id int64) (*RuntimeTransaction, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", runtimeTransactionRows, m.table)
	var resp RuntimeTransaction
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuntimeTransactionModel) FindOneByRuntimeIdRoundTxHash(ctx context.Context, runtimeId string, round int64, txHash string) (*RuntimeTransaction, error) {
	var resp RuntimeTransaction
	query := fmt.Sprintf("select %s from %s where runtime_id = $1 and round = $2 and tx_hash = $3 limit 1", runtimeTransactionRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, runtimeId, round, txHash)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuntimeTransactionModel) Insert(ctx context.Context, data *RuntimeTransaction) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18)", m.table, runtimeTransactionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RuntimeId, data.Round, data.TxHash, data.Position, data.EvmHash, data.ConsensusFrom, data.ConsensusTo, data.EvmFrom, data.EvmTo, data.Method, data.Result, data.Messages, data.Timestamp, data.Type, data.Raw, data.Events, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultRuntimeTransactionModel) Update(ctx context.Context, newData *RuntimeTransaction) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, runtimeTransactionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.RuntimeId, newData.Round, newData.TxHash, newData.Position, newData.EvmHash, newData.ConsensusFrom, newData.ConsensusTo, newData.EvmFrom, newData.EvmTo, newData.Method, newData.Result, newData.Messages, newData.Timestamp, newData.Type, newData.Raw, newData.Events, newData.CreatedAt, newData.UpdatedAt)
	return err
}

func (m *defaultRuntimeTransactionModel) tableName() string {
	return m.table
}

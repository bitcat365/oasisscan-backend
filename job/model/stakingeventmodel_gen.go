// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stakingEventFieldNames          = builder.RawFieldNames(&StakingEvent{}, true)
	stakingEventRows                = strings.Join(stakingEventFieldNames, ",")
	stakingEventRowsExpectAutoSet   = strings.Join(stringx.Remove(stakingEventFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	stakingEventRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(stakingEventFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	stakingEventModel interface {
		Insert(ctx context.Context, data *StakingEvent) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StakingEvent, error)
		FindOneByHeightPosition(ctx context.Context, height int64, position int64) (*StakingEvent, error)
		Update(ctx context.Context, data *StakingEvent) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStakingEventModel struct {
		conn  sqlx.SqlConn
		table string
	}

	StakingEvent struct {
		Id        int64     `db:"id"`
		Height    int64     `db:"height"`
		Position  int64     `db:"position"`
		TxHash    string    `db:"tx_hash"`
		Kind      string    `db:"kind"`
		EventFrom string    `db:"event_from"`
		EventTo   string    `db:"event_to"`
		Amount    int64     `db:"amount"`
		Raw       string    `db:"raw"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newStakingEventModel(conn sqlx.SqlConn) *defaultStakingEventModel {
	return &defaultStakingEventModel{
		conn:  conn,
		table: `"public"."staking_event"`,
	}
}

func (m *defaultStakingEventModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStakingEventModel) FindOne(ctx context.Context, id int64) (*StakingEvent, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", stakingEventRows, m.table)
	var resp StakingEvent
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStakingEventModel) FindOneByHeightPosition(ctx context.Context, height int64, position int64) (*StakingEvent, error) {
	var resp StakingEvent
	query := fmt.Sprintf("select %s from %s where height = $1 and position = $2 limit 1", stakingEventRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, height, position)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStakingEventModel) Insert(ctx context.Context, data *StakingEvent) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8)", m.table, stakingEventRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Height, data.Position, data.TxHash, data.Kind, data.EventFrom, data.EventTo, data.Amount, data.Raw)
	return ret, err
}

func (m *defaultStakingEventModel) Update(ctx context.Context, newData *StakingEvent) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, stakingEventRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Height, newData.Position, newData.TxHash, newData.Kind, newData.EventFrom, newData.EventTo, newData.Amount, newData.Raw)
	return err
}

func (m *defaultStakingEventModel) tableName() string {
	return m.table
}

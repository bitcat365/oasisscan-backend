// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemPropertyFieldNames          = builder.RawFieldNames(&SystemProperty{}, true)
	systemPropertyRows                = strings.Join(systemPropertyFieldNames, ",")
	systemPropertyRowsExpectAutoSet   = strings.Join(stringx.Remove(systemPropertyFieldNames, "id"), ",")
	systemPropertyRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(systemPropertyFieldNames, "id"))
)

type (
	systemPropertyModel interface {
		Insert(ctx context.Context, data *SystemProperty) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemProperty, error)
		FindOneByProperty(ctx context.Context, property string) (*SystemProperty, error)
		Update(ctx context.Context, data *SystemProperty) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemPropertyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SystemProperty struct {
		Id        int64     `db:"id"`
		Property  string    `db:"property"`
		Value     string    `db:"value"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newSystemPropertyModel(conn sqlx.SqlConn) *defaultSystemPropertyModel {
	return &defaultSystemPropertyModel{
		conn:  conn,
		table: `"public"."system_property"`,
	}
}

func (m *defaultSystemPropertyModel) withSession(session sqlx.Session) *defaultSystemPropertyModel {
	return &defaultSystemPropertyModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."system_property"`,
	}
}

func (m *defaultSystemPropertyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSystemPropertyModel) FindOne(ctx context.Context, id int64) (*SystemProperty, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", systemPropertyRows, m.table)
	var resp SystemProperty
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemPropertyModel) FindOneByProperty(ctx context.Context, property string) (*SystemProperty, error) {
	var resp SystemProperty
	query := fmt.Sprintf("select %s from %s where property = $1 limit 1", systemPropertyRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, property)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemPropertyModel) Insert(ctx context.Context, data *SystemProperty) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, systemPropertyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Property, data.Value, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultSystemPropertyModel) Update(ctx context.Context, newData *SystemProperty) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, systemPropertyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.Property, newData.Value, newData.CreatedAt, newData.UpdatedAt)
	return err
}

func (m *defaultSystemPropertyModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	transactionFieldNames          = builder.RawFieldNames(&Transaction{}, true)
	transactionRows                = strings.Join(transactionFieldNames, ",")
	transactionRowsExpectAutoSet   = strings.Join(stringx.Remove(transactionFieldNames, "id"), ",")
	transactionRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(transactionFieldNames, "id"))
)

type (
	transactionModel interface {
		Insert(ctx context.Context, data *Transaction) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Transaction, error)
		FindOneByTxHashHeight(ctx context.Context, txHash string, height int64) (*Transaction, error)
		Update(ctx context.Context, data *Transaction) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTransactionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Transaction struct {
		Id        int64     `db:"id"`
		TxHash    string    `db:"tx_hash"`
		Method    string    `db:"method"`
		Status    bool      `db:"status"`
		Nonce     int64     `db:"nonce"`
		Height    int64     `db:"height"`
		Timestamp time.Time `db:"timestamp"`
		SignAddr  string    `db:"sign_addr"`
		ToAddr    string    `db:"to_addr"`
		Fee       int64     `db:"fee"`
		Amount    int64     `db:"amount"`
		Shares    int64     `db:"shares"`
		Error     string    `db:"error"`
		Events    string    `db:"events"`
		Raw       string    `db:"raw"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newTransactionModel(conn sqlx.SqlConn) *defaultTransactionModel {
	return &defaultTransactionModel{
		conn:  conn,
		table: `"public"."transaction"`,
	}
}

func (m *defaultTransactionModel) withSession(session sqlx.Session) *defaultTransactionModel {
	return &defaultTransactionModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."transaction"`,
	}
}

func (m *defaultTransactionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTransactionModel) FindOne(ctx context.Context, id int64) (*Transaction, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", transactionRows, m.table)
	var resp Transaction
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTransactionModel) FindOneByTxHashHeight(ctx context.Context, txHash string, height int64) (*Transaction, error) {
	var resp Transaction
	query := fmt.Sprintf("select %s from %s where tx_hash = $1 and height = $2 limit 1", transactionRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, txHash, height)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTransactionModel) Insert(ctx context.Context, data *Transaction) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)", m.table, transactionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TxHash, data.Method, data.Status, data.Nonce, data.Height, data.Timestamp, data.SignAddr, data.ToAddr, data.Fee, data.Amount, data.Shares, data.Error, data.Events, data.Raw, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultTransactionModel) Update(ctx context.Context, newData *Transaction) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, transactionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Id, newData.TxHash, newData.Method, newData.Status, newData.Nonce, newData.Height, newData.Timestamp, newData.SignAddr, newData.ToAddr, newData.Fee, newData.Amount, newData.Shares, newData.Error, newData.Events, newData.Raw, newData.CreatedAt, newData.UpdatedAt)
	return err
}

func (m *defaultTransactionModel) tableName() string {
	return m.table
}
